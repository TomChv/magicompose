package main

import (
	"context"
	"dagger/services/internal/dagger"
)

type Services struct{}

{{ range $service := .Services }}
func (m *Services) {{ $service.Name | ToUpper }}(
	ctx context.Context,

	{{- $volumeLength := len $service.Volumes -}}
	{{- if gt $volumeLength 0 -}}
		{{- range $i, $volume := $service.Volumes }}
			{{- if IsBind $volume }}
	
	// +defaultPath="{{ $volume.Origin | ConvertPathToContextDir }}"
	volume{{ $i }} {{ VolumeToFileOrDirectory $volume }},
			{{- end }}
		{{- end }}
	{{- end }}
) (*dagger.Service, error) {
	return dag.Container().
		From("{{ $service.Image }}").
		{{- range $env := $service.Env }}
			{{- if $env.Value }}
		WithEnvVariable("{{ $env.Name }}", "{{ $env.Value }}").
			{{- else }}
		WithEnvVariable("{{ $env.Name }}", ""). // Couldn't find the value from the inspection, please pass it manually.
			{{- end }}
		{{- end }}

		{{- range $port := $service.Ports }}
		WithExposedPort({{ $port.Target }}).
		{{- end }}

		{{- range $i, $volume := $service.Volumes }}
			{{- if IsCache $volume }}
		WithMountedCache("{{ $volume.Destination }}", dag.CacheVolume("{{ $service.Name }}-{{ $volume.Origin }}")).
			{{- end }}

			{{- if IsBind $volume }}

			{{- if IsDir $volume }}
		WithMountedDirectory(
			"{{ $volume.Destination }}", 
			volume{{ $i }},
		).
			{{- else }}
		WithMountedFile(
			"{{ $volume.Destination }}", 
			volume{{ $i }},
		).
			{{- end }}
			{{- end }}

		{{- end }}
		WithEntrypoint([]string{
		{{- range $cmd := $service.Command }}
			"{{ $cmd }}",
		{{- end }}
		}).
	AsService().
	Start(ctx)
}
{{- end }}
