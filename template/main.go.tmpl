package main

import (
	"context"
	"dagger/services/internal/dagger"
)

type Services struct{}

{{ range $service := .Services }}
func (m *Services) {{ $service.Name | ToUpper }}(
	ctx context.Context,

	{{- $volumeLength := len $service.Volumes -}}
	{{- if gt $volumeLength 0 -}}
	// Bound volume detected in your compose file, please pass the directory to the service
	// Example: 
	// // +defaultPath="config"
	// configDir *dagger.Directory
	//
	// // +defaultPath="config/postgres.conf"
	// postgresConf *dagger.File
	{{- end }}
) (*dagger.Service, error) {
	return dag.Container().
		From("{{ $service.Image }}").
		{{- range $env := $service.Env }}
			{{- if $env.Value }}
		WithEnvVariable("{{ $env.Name }}", "{{ $env.Value }}").
			{{- else }}
		WithEnvVariable("{{ $env.Name }}", ""). // Couldn't find the value from the inspection, please pass it manually.
			{{- end }}
		{{- end }}

		{{- range $port := $service.Ports }}
		WithExposedPort({{ $port.Target }}).
		{{- end }}

		{{- range $volume := $service.Volumes }}
			{{- if IsCache $volume }}
		WithMountedCache("{{ $volume.Destination }}", dag.CacheVolume("{{ $service.Name }}-ADD_NAME_HERE")). // Add a specific cache key there.
			{{- end }}

			{{- if IsBind $volume }}
		// Mounted volume detected in your compose file, please pass the directory as argument and mount it
		// there in the service.
		WithMountedDirectory(
			"{{ $volume.Destination }}", 
			// The directory passed as argument to this function.	
		).
			{{- end }}

		{{- end }}
		WithEntrypoint([]string{
		{{- range $cmd := $service.Command }}
			"{{ $cmd }}",
		{{- end }}
		}).
	AsService().
	Start(ctx)
}
{{- end }}
